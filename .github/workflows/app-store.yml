name: App Store Deployment (Raw)

on:
  # workflow_run:
  #   workflows: ["Test"]
  #   types:
  #     - completed
  #   branches: [main]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Build and Deploy
    runs-on: macos-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Set up keychain
        env:
          CERTIFICATE_PRIVATE_KEY: ${{ secrets.APPLE_CERTIFICATE_PRIVATE_KEY }}
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_APP_PROFILE_BASE64: ${{ secrets.IOS_APP_PROFILE_BASE64 }}
          IOS_EXT_PROFILE_BASE64: ${{ secrets.IOS_EXT_PROFILE_BASE64 }}
          MACOS_APP_PROFILE_BASE64: ${{ secrets.MACOS_APP_PROFILE_BASE64 }}
          MACOS_EXT_PROFILE_BASE64: ${{ secrets.MACOS_EXT_PROFILE_BASE64 }}
        run: |
          # Create keychain
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -l "$KEYCHAIN_NAME"

          # Import certificate and private key
          echo "$CERTIFICATE_PRIVATE_KEY" > certificate_key.pem
          echo "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > distribution.cer
          security import certificate_key.pem -k "$KEYCHAIN_NAME" -T /usr/bin/codesign
          security import distribution.cer -k "$KEYCHAIN_NAME" -T /usr/bin/codesign
          rm certificate_key.pem distribution.cer
          
          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Install iOS profiles
          echo "$IOS_APP_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/6246ca8e-aab3-4198-884e-830365762798.mobileprovision
          echo "$IOS_EXT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/ab80ed03-cb65-48d0-9a29-5c49c14d92cb.mobileprovision
          
          # Install macOS profiles
          echo "$MACOS_APP_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/a89a9371-c399-4d94-a818-dd9ac18073e8.provisionprofile
          echo "$MACOS_EXT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/b7aa50ba-5637-42de-ad00-131951990ae4.provisionprofile

      - name: Set up App Store Connect API
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          # Create private_keys directory
          mkdir -p ~/.appstoreconnect/private_keys
    
          # Store API key
          echo "$APPLE_API_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8

      - name: Verify App Store Connect API credentials
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Store API key
          xcrun altool --list-apps \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_KEY_ISSUER_ID"

      - name: Build iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # List installed profiles
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Archive
          xcodebuild archive \
            -project "Braver Search/Braver Search.xcodeproj" \
            -scheme "Braver Search (iOS)" \
            -configuration Release \
            -archivePath build/ios/BraverSearch.xcarchive \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            "Braver Search (iOS):PROVISIONING_PROFILE=6246ca8e-aab3-4198-884e-830365762798" \
            "Braver Search Extension (iOS):PROVISIONING_PROFILE=ab80ed03-cb65-48d0-9a29-5c49c14d92cb" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain"

          # Create exportOptions.plist for iOS
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>xyz.bsquared.Braver-Search</key>
                  <string>6246ca8e-aab3-4198-884e-830365762798</string>
                  <key>xyz.bsquared.Braver-Search.Extension</key>
                  <string>ab80ed03-cb65-48d0-9a29-5c49c14d92cb</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF

          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/ios/BraverSearch.xcarchive \
            -exportPath build/ios \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates

      - name: Build macOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Archive
          xcodebuild archive \
            -project "Braver Search/Braver Search.xcodeproj" \
            -scheme "Braver Search (macOS)" \
            -configuration Release \
            -archivePath build/macos/BraverSearch.xcarchive \
            -destination "generic/platform=macOS" \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            "Braver Search (macOS):PROVISIONING_PROFILE=a89a9371-c399-4d94-a818-dd9ac18073e8" \
            "Braver Search Extension (macOS):PROVISIONING_PROFILE=b7aa50ba-5637-42de-ad00-131951990ae4" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain"

          # Create exportOptions.plist for macOS
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>xyz.bsquared.Braver-Search</key>
                  <string>a89a9371-c399-4d94-a818-dd9ac18073e8</string>
                  <key>xyz.bsquared.Braver-Search.Extension</key>
                  <string>b7aa50ba-5637-42de-ad00-131951990ae4</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF

          # Export APP
          xcodebuild -exportArchive \
            -archivePath build/macos/BraverSearch.xcarchive \
            -exportPath build/macos \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates

      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Upload iOS build
          xcrun altool --upload-app --type ios \
            --file "build/ios/BraverSearch.ipa" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_KEY_ISSUER_ID"
          
          # Upload macOS build
          xcrun altool --upload-app --type osx \
            --file "build/macos/BraverSearch.app" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_KEY_ISSUER_ID" 

      - name: Clean up secrets
        if: always()
        run: |
          rm -f ~/.appstoreconnect/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8